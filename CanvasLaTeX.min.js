(function(root){ 'use strict'; root.latex = {}; root.latex.blocks = {}; root.latex.blocks.abstract_block = { get_width : function(cursor) { return this.get_block_width(cursor); }, get_height : function(cursor) { return this.get_block_height(cursor); }, render : function(cursor) { this.block_render(cursor); return this; }, get_class_name : function() { return this.get_block_name(); } }; root.latex.blocks.get_param_length = function(alpha) { var result = 0; var stack = []; for(var i = 0; i < alpha.length; i++){ if(stack.length != 0) { result++; }; if(alpha[i] === '\\' && (alpha[i + 1] === '{' || alpha[i + 1] === '}')) { if(stack.length != 0) { result++; }; i++; continue;  }; if(alpha[i] === '{'){ stack.push('{'); } else if(alpha[i] == '}'){ stack.pop(); if(stack.length === 0) return result - 1; }; }; return 0; };})(this);(function(root){ root.cursor_default_cfg = { paragraph_body : { size : 14, family : 'new times roman', color : 'black', style : 'normal' }, paragraph_title : { size : 14, family : 'new times roman', color : 'black', style : 'bold' }, h1 : { size : 24, family : 'new times roman', color : 'black', style : 'bold' }, h2 : { size : 18, family : 'new times roman', color : 'black', style : 'bold' }, h3 : { size : 16, family : 'new times roman', color : 'black', style : 'bold' } };})(this.latex);(function(root){ 'use strict'; function latex_cursor(canvas, top, right, bottom, left){ var self = {}; self.ctx = canvas.getContext('2d'); self.size = 14; self.family = 'new times roman'; self.color = 'black'; self.style = 'normal'; self.cursor = { x : left, y : top }; this.get_size = function() { return self.size; }; this.set_size = function(value) { self.size = value; return this; }; this.get_family = function() { return self.family; }; this.set_family = function(value) { self.family = value; return this; }; this.get_color = function() { return self.color; }; this.set_color = function(value) { self.color = value; return this; }; this.get_style = function() { return self.style; }; this.set_style = function(value) { self.style = value; return this; }; this.get_cursor = function() { return self.cursor; }; this.set_cursor = function(value) { self.cursor = value; return this; }; this.get_x = function() { return self.cursor.x; }; this.set_x = function(value) { self.cursor.x = value; return this; }; this.get_y = function() { return self.cursor.y; }; this.set_y = function(value) { self.cursor.y = value; return this; }; function assemble_ctx(){ self.ctx.font = self.style + ' ' + self.size + 'px ' + self.family; self.ctx.fillStyle = self.color; }; this.get_measure = function(text){ assemble_ctx(); return { width : self.ctx.measureText(text).width, height : this.get_size() }; }; this.write_word = function(word){ assemble_ctx(); self.ctx.fillText(word, this.get_x(), this.get_y()); this.set_x(this.get_x() + this.get_measure(word).width); }; this.jump_space = function(spacing){ this.set_x(this.get_x() + spacing * this.get_size()); }; this.draw_line = function(x1, y1, x2, y2){ self.ctx.moveTo(x1, y1); self.ctx.lineTo(x2, y2); self.ctx.stroke(); }; this.set_cfg = function(cfg){ this.set_size(cfg.size); this.set_family(cfg.family); this.set_color(cfg.color); this.set_style(cfg.style) }; this.get_cfg = function(){ return { size : this.get_size(), family : this.get_family(), color : this.get_color(), style : this.get_style() }; }; this.get_rendered = function(startx, starty, endx, endy){ return self.ctx.getImageData(startx, starty, endx, endy); }; this.put_image = function(startx, starty, img){ self.ctx.putImageData(img, startx, starty); }; }; root.cursor = latex_cursor;})(this.latex);(function(root){ 'use strict'; root.line_buf = function() { var self = {}; self.width = 0; self.height = 0; self.blocks = []; this.shift_blocks = function() { return self.blocks.shift(); }; this.get_blocks_length = function() { return self.blocks.length; }; this.get_first_block = function() { return self.blocks[0]; }; this.blocks_append = function(block) { self.blocks.push(block); }; this.get_width = function(cursor) { var result = 0; for(var i = 0; i < self.blocks.length; i++){ result = result + self.blocks[i].get_width(cursor); }; return result; }; this.get_height = function(cursor) { var height = 0; var len = self.blocks.length; for(var i = 0; i < len; i++){ var tmp_height = self.blocks[i].get_height(cursor); if(height < tmp_height){ height = tmp_height; }; }; return height; }; function word_transfer_block(alpha){ for(var block in root.blocks){ if(root.blocks[block].test && block != 'simple'){ if(root.blocks[block].test(alpha)){ return root.blocks[block].build(alpha); }; }; };  return root.blocks.simple.build(alpha); }; this.append = function(word){ var alpha = word; while(alpha.length > 0){ var tuple = word_transfer_block(alpha); self.blocks.push(tuple[1]); alpha = tuple[0]; }; return this; }; this.insert = function(word, index){ var alpha = word; var offset = index; while(alpha.length > 0){ var tuple = word_transfer_block(alpha); self.blocks.splice(offset, 0, tuple[1]); alpha = tuple[0]; offset = offset + 1; }; return this; }; this.render = function(cursor){ var buf_len = self.blocks.length; var origin_y = cursor.get_y(); for(var i = 0; i < buf_len; i++){ cursor.set_y(origin_y + self.blocks[i].get_height(cursor) / 2); self.blocks[i].render(cursor); cursor.set_y(origin_y); }; return this; }; };})(this.latex);(function(root){ 'use strict'; function latex_page(dom, width, height, padding){ var page_dom = dom; var page_size = { width : width, height : height }; var page_padding = padding; var page_cursor = new root.cursor(page_dom, 0, width, height, 0); page_dom.setAttribute('width', page_size.width); page_dom.setAttribute('height', page_size.height); this.get_cursor = function(){ return page_cursor; }; this.get_width = function() { return page_size.width; }; this.get_height = function() { return page_size.height; }; this.set_width = function(width) { var cache_data = page_cursor.get_rendered(0, 0, page_size.width, page_size.height); page_dom.setAttribute('width', width); page_size.width = width;  page_cursor.put_image(0, 0, cache_data); }; this.set_height = function(height) {  var cache_data = page_cursor.get_rendered(0, 0, page_size.width, page_size.height); page_dom.setAttribute('height', height); page_size.height = height;  page_cursor.put_image(0, 0, cache_data); }; }; root.page = latex_page;})(this.latex);(function(root){ 'use strict'; function latex_document(area_dom, page_info){ var self = {}; self.pages = []; self.area = area_dom; self.text = ''; if(page_info == undefined){ page_info = { width : 595, height : 1, line_spacing : 0.2 }; }; self.page_info = page_info; function create_page(){ var canvas_element = document.createElement('canvas'); self.area.appendChild(canvas_element); var new_page = new root.page(canvas_element, self.page_info.width, self.page_info.height); self.pages.push(new_page); return new_page; }; this.document = function(text){ self.text = text; this.render(); return this; }; this.render = function(){ var text_blocks = (new root.line_buf()).append(self.text); var page = create_page(); page.get_cursor().set_x(0).set_y(0); var row_width_limit = self.page_info.width; do { var row_blocks = new root.line_buf(); var break_flag = false; while(text_blocks.get_blocks_length() > 0 && row_blocks.get_width(page.get_cursor()) + text_blocks.get_first_block().get_width(page.get_cursor()) < row_width_limit){  if((function(a){ return a === 'center' || a.indexOf('section') != -1 || a === 'crlf' })(text_blocks.get_first_block().get_class_name())) {  if (row_blocks.get_blocks_length() === 0) { row_blocks.blocks_append(text_blocks.shift_blocks()); } break; }; var block = text_blocks.shift_blocks(); row_blocks.blocks_append(block); }; if(page.get_cursor().get_y() + row_blocks.get_height(page.get_cursor()) * 2 + self.page_info.line_spacing * page.get_cursor().get_size() > page.get_height()){ page.set_height(page.get_height() + 2 * row_blocks.get_height(page.get_cursor()) * 2 + self.page_info.line_spacing * page.get_cursor().get_size()); }; page.get_cursor().set_y(page.get_cursor().get_y() + row_blocks.get_height(page.get_cursor()) + self.page_info.line_spacing * page.get_cursor().get_size()); if(row_blocks.get_first_block().get_class_name() === 'center'){ page.get_cursor().set_x((row_width_limit - row_blocks.get_width(page.get_cursor()) ) / 2); } else{ page.get_cursor().set_x(0); } row_blocks.render(page.get_cursor()); }while(text_blocks.get_blocks_length() > 0); }; }; root.document = latex_document;})(this.latex);(function(root){ 'use strict'; root.blocks.simple = function simple(word, top_line_buf, bottom_line_buf){ var self = {}; self.word = word; if(top_line_buf === undefined) { top_line_buf = new root.line_buf(); }; if(bottom_line_buf === undefined) { bottom_line_buf = new root.line_buf(); }; self.line_bufs = [top_line_buf, bottom_line_buf]; self.small_ratio = 0.6; self.right_spacing = 0.1; this.get_block_name = function(){ return 'simple'; }; this.get_block_width = function(cursor){ var origin_width = cursor.get_measure(self.word).width; var member = cursor.get_size(); cursor.set_size(member * self.small_ratio); var width = origin_width + (function(a, b) { if(a > b) { return a;} else { return b;}; })(self.line_bufs[0].get_width(cursor), self.line_bufs[1].get_width(cursor)); cursor.set_size(member); return width + self.right_spacing * cursor.get_size(); }; this.get_block_height = function(cursor){ var origin_height = cursor.get_measure(self.word).height; var member = cursor.get_size(); cursor.set_size(member * self.small_ratio); var height = origin_height + (function(a, b) { if(a > b) { return a;} else { return b;}; })(self.line_bufs[0].get_height(cursor), self.line_bufs[1].get_height(cursor)); cursor.set_size(member); return height; }; this.block_render = function(cursor){ var member = cursor.get_size(); var origin_x = cursor.get_x(); var origin_y = cursor.get_y(); var origin_width = cursor.get_measure(self.word).width; var origin_height = cursor.get_measure(self.word).height; cursor.set_size(member * self.small_ratio); var tor_height = (function(a, b) { if(a > b) { return a;} else { return b;}; })(self.line_bufs[0].get_height(cursor), self.line_bufs[1].get_height(cursor)); cursor.set_size(member); cursor.set_y(origin_y - tor_height / 2); cursor.write_word(self.word); cursor.set_size(member * self.small_ratio); cursor.set_y(origin_y - tor_height / 2); cursor.set_x(origin_x + origin_width + member * self.right_spacing); self.line_bufs[1].render(cursor); cursor.set_y(origin_y - tor_height / 4 - origin_height); cursor.set_x(origin_x + origin_width + member * self.right_spacing); self.line_bufs[0].render(cursor); cursor.set_size(member); cursor.set_x(origin_x + this.get_block_width(cursor)); }; }; root.blocks.simple.prototype = root.blocks.abstract_block; root.blocks.simple.build = function(alpha){ if(/^\\./.test(alpha)) alpha = alpha.substring(1);  var word = alpha[0]; for(var i = 1; i < alpha.length; i++){ if(/[0-9A-Za-z]/.test(alpha[i])) { word = word + alpha[i]; } else { break; }; } var top_length = 0; var bottom_length = 0; var is_top = 0; var is_bottom = 0; var top_param = ''; var bottom_param = ''; var px = 0; for(var i = word.length; i < alpha.length; i++){ if (alpha[i] === '_' && is_bottom === 0) { is_bottom = 1; px = px + 1; } else if (alpha[i] === '^' && is_top === 0) { is_top = 1; px = px + 1;} else if (alpha[i] === '{' && is_bottom === 1) { bottom_length = root.blocks.get_param_length(alpha.substring(i)); bottom_param = alpha.substr(i + 1, bottom_length); is_bottom = 2; i = i + 1 + bottom_length; px = px + 2; } else if(alpha[i] === '{' && is_top === 1) { top_length = root.blocks.get_param_length(alpha.substring(i)); top_param = alpha.substr(i + 1, top_length); is_top = 2; i = i + 1 + top_length; px = px + 2; } else if (is_bottom === 1) { bottom_length = 1; bottom_param = alpha[i]; is_bottom = 2; } else if (is_top === 1) { top_length = 1; top_param = alpha[i]; is_top = 2; } else { break; }; }; return [alpha.substring(word.length + bottom_length + top_length + px), new root.blocks.simple(word, (new root.line_buf()).append(top_param), (new root.line_buf()).append(bottom_param))]; };})(this.latex);(function(root){ function local_section_cfg(){ var self = {}; self.section = 0; self.sub_section = 0; self.sub_sub_section = 0; this.get_new_section_id = function(){ self.section = self.section + 1; self.sub_section = 0; self.sub_sub_section = 0; return '' + self.section; }; this.get_new_sub_section_id = function(){ self.sub_section = self.sub_section + 1; self.sub_sub_section = 0; return self.section + '.' + self.sub_section; }; this.get_new_sub_sub_section_id = function(){ self.sub_sub_section = self.sub_sub_section + 1; return self.section + '.' + self.sub_section + '.' + self.sub_sub_section; }; }; root.blocks.section_cfg = new local_section_cfg();})(this.latex);(function(root, cfg){ 'use strict'; root.blocks.origin_section = function(line_buf, cfg_h, num, class_name){ var self = {}; self.line_buf = line_buf; self.cfg = cfg_h; self.class_name = class_name; self.line_buf.insert('\\jump{0.2} ', 0); self.line_buf.insert(num, 0); this.get_block_name = function() { return self.class_name; }; this.get_block_width = function(cursor){ var remember_origin_cfg = cursor.get_cfg(); cursor.set_cfg(self.cfg); var result = self.line_buf().get_width(cursor); cursor.set_cfg(remember_origin_cfg); return result; }; this.get_block_height = function(cursor){ var remember_origin_cfg = cursor.get_cfg(); cursor.set_cfg(self.cfg); var result = self.line_buf.get_height(cursor); cursor.set_cfg(remember_origin_cfg); return result; }; this.block_render = function(cursor){ var remember_origin_cfg = cursor.get_cfg(); cursor.set_cfg(self.cfg); self.line_buf.render(cursor); cursor.set_cfg(remember_origin_cfg); }; }; root.blocks.origin_section.prototype = root.blocks.abstract_block; root.blocks.section = function(line_buf){ return new root.blocks.origin_section(line_buf, cfg.h1, root.blocks.section_cfg.get_new_section_id(), 'section'); }; root.blocks.section.build = function(alpha){ const block_length = 8; const param_length = root.blocks.get_param_length(alpha.substring(block_length)); return [alpha.substring(block_length + param_length + 2), new root.blocks.section((new root.line_buf()).append(alpha.substr(block_length + 1, param_length)))]; }; root.blocks.section.test = function(alpha) { return /^\\section/.test(alpha); }; root.blocks.subsection = function(line_buf){ return new root.blocks.origin_section(line_buf, cfg.h2, root.blocks.section_cfg.get_new_sub_section_id(), 'subsection'); }; root.blocks.subsection.build = function(alpha){ const block_length = 11; const param_length = root.blocks.get_param_length(alpha.substring(block_length)); return [alpha.substring(block_length + param_length + 2), new root.blocks.subsection((new root.line_buf()).append(alpha.substr(block_length + 1, param_length)))]; }; root.blocks.subsection.test = function(alpha) { return /^\\subsection/.test(alpha); }; root.blocks.subsubsection = function(line_buf){ return new root.blocks.origin_section(line_buf, cfg.h3, root.blocks.section_cfg.get_new_sub_sub_section_id(), 'subsubsection'); }; root.blocks.subsubsection.build = function(alpha){ const block_length = 14; const param_length = root.blocks.get_param_length(alpha.substring(block_length)); return [alpha.substring(block_length + param_length + 2), new root.blocks.subsubsection((new root.line_buf()).append(alpha.substr(block_length + 1, param_length)))]; }; root.blocks.subsubsection.test = function(alpha) { return /^\\subsubsection/.test(alpha); };})(this.latex, this.latex.cursor_default_cfg);(function(root, cfg) { 'use strict'; root.blocks.paragraph = function(line_buf) { var self = {}; self.line_buf = line_buf; self.cfg = cfg;  this.get_block_name = function(){ return 'paragraph'; }; this.get_block_width = function(cursor) { var remember_origin_cfg = cursor.get_cfg(); cursor.set_cfg(self.cfg); var result = self.line_buf.get_width(cursor) + cursor.get_size(); cursor.set_cfg(remember_origin_cfg); return result; }; this.get_block_height = function(cursor) { var remember_origin_cfg = cursor.get_cfg(); cursor.set_cfg(self.cfg); var result = self.line_buf.get_height(cursor); cursor.set_cfg(remember_origin_cfg); return result; }; this.block_render = function(cursor) { var remember_origin_cfg = cursor.get_cfg(); cursor.set_cfg(self.cfg); self.line_buf.render(cursor); cursor.set_x(self.cursor.get_x() + cursor.get_size()); cursor.set_cfg(remember_origin_cfg); }; }; root.blocks.paragraph.prototype = root.blocks.abstract_block; root.blocks.paragraph.build = function(alpha) { const block_length = 10; const param_length = root.blocks.get_param_length(alpha.substring(block_length)); return [alpha.substring(block_length + param_length + 2), (new root.line_buf()).append(alpha.substr(block_length + 1, param_length))]; }; root.blocks.paragraph.test = function(alpha) { return /^\\paragraph/.test(alpha); };})(this.latex, this.latex.cursor_default_cfg.paragraph_title);(function(root){ 'use strict'; root.blocks.jump = function(spacing){ var self = {}; self.spacing = spacing; this.get_block_name = function(){ return 'jump'; }; this.get_block_width = function(cursor){ return cursor.get_size() * self.spacing; }; this.get_block_height = function(cursor){ return cursor.get_measure('').height; }; this.block_render = function(cursor){ cursor.jump_space(self.spacing); }; }; root.blocks.jump.prototype = root.blocks.abstract_block; root.blocks.jump.build = function(alpha){ const block_length = 5; const param_length = root.blocks.get_param_length(alpha.substring(block_length)); return [alpha.substring(block_length + param_length + 2), new root.blocks.jump((new root.line_buf()).append(alpha.substr(block_length + 1, param_length)))]; }; root.blocks.jump.test = function(alpha) { return /^\\jump/.test(alpha); };})(this.latex);(function(root){ root.blocks.bf = function(line_buf){ var self = {}; self.line_buf = line_buf; this.get_block_name = function(){ return 'bf'; }; this.get_block_width = function(cursor){ var member = cursor.get_style(); cursor.set_style('bold'); var width = self.line_buf.get_width(cursor); cursor.set_style(member); return width; }; this.get_block_height = function(cursor){ var member = cursor.get_style(); cursor.set_style('bold'); var height = self.line_buf.get_height(cursor); cursor.set_style(member); return height; }; this.block_render = function(cursor){ var member = cursor.get_style(); cursor.set_style('bold'); cursor.set_y(cursor.get_y() - this.get_block_height(cursor) / 2); self.line_buf.render(cursor); cursor.set_style(member); }; }; root.blocks.bf.prototype = root.blocks.abstract_block;  root.blocks.bf.test = function(alpha) { return /^{\\bf/.test(alpha); }; root.blocks.bf.build = function(alpha) { const param_length = root.blocks.get_param_length(alpha); return [alpha.substring(param_length + 2), new root.blocks.bf((new root.line_buf()).append(alpha.substr(4, param_length - 3)))]; };})(this.latex);(function(root){ root.blocks.center = function(line_buf){ var self = {}; self.line_buf = line_buf; this.get_block_name = function(){ return 'center'; }; this.get_block_width = function(cursor){ return self.line_buf.get_width(cursor); }; this.get_block_height = function(cursor){ return self.line_buf.get_height(cursor); }; this.block_render = function(cursor){ cursor.set_y(cursor.get_y() - this.get_block_height(cursor) / 2); self.line_buf.render(cursor); }; }; root.blocks.center.prototype = root.blocks.abstract_block;  root.blocks.center.test = function(alpha) { return /^{\\center/.test(alpha); }; root.blocks.center.build = function(alpha) { const param_length = root.blocks.get_param_length(alpha); return [alpha.substring(param_length + 2), new root.blocks.center((new root.line_buf()).append(alpha.substr(8, param_length - 7)))]; };})(this.latex);(function(root){ root.blocks.crlf = function(){ this.get_block_name = function() { return "crlf"; }; this.get_block_width = function(cursor) { return 0; }; this.get_block_height = function(cursor) { return 0; }; this.block_render = function(cursor) {}; }; root.blocks.crlf.prototype = root.blocks.abstract_block; root.blocks.crlf.build = function(alpha) { return [alpha.substring(2), new root.blocks.crlf()]; }; root.blocks.crlf.test = function(alpha) { return /^\\\\/.test(alpha); };})(this.latex);(function(root){ root.blocks.origin_font_size = function(ratio){ var self = {}; self.ratio = ratio; this.get_block_name = function() { return "tiny"; }; this.get_block_width = function(cursor) { return 0; }; this.get_block_height = function(cursor) { return 0; }; this.block_render = function(cursor) { cursor.set_size(self.ratio); }; }; root.blocks.origin_font_size.prototype = root.blocks.abstract_block; root.blocks.tiny = {}; root.blocks.tiny.build = function(alpha) { return [alpha.substring(5), new root.blocks.origin_font_size(8)]; }; root.blocks.tiny.test = function(alpha) { return /^\\tiny/.test(alpha); };  root.blocks.scriptsize = {}; root.blocks.scriptsize.build = function(alpha) { return [alpha.substring(11), new root.blocks.origin_font_size(12)]; }; root.blocks.scriptsize.test = function(alpha) { return /^\\scriptsize/.test(alpha); };  root.blocks.footnotesize = {}; root.blocks.footnotesize.build = function(alpha) { return [alpha.substring(13), new root.blocks.origin_font_size(16)]; }; root.blocks.footnotesize.test = function(alpha) { return /^\\footnotesize/.test(alpha); };  root.blocks.small = {}; root.blocks.small.build = function(alpha) { return [alpha.substring(6), new root.blocks.origin_font_size(18)]; }; root.blocks.small.test = function(alpha) { return /^\\small/.test(alpha); };  root.blocks.normalsize = {}; root.blocks.normalsize.build = function(alpha) { return [alpha.substring(11), new root.blocks.origin_font_size(20)]; }; root.blocks.normalsize.test = function(alpha) { return /^\\normalsize/.test(alpha); };  root.blocks.large = {}; root.blocks.large.build = function(alpha) { return [alpha.substring(6), new root.blocks.origin_font_size(22)]; }; root.blocks.large.test = function(alpha) { return /^\\large/.test(alpha); };  root.blocks.Large = {}; root.blocks.Large.build = function(alpha) { return [alpha.substring(6), new root.blocks.origin_font_size(24)]; }; root.blocks.Large.test = function(alpha) { return /^\\Large/.test(alpha); };  root.blocks.LARGE = {}; root.blocks.LARGE.build = function(alpha) { return [alpha.substring(6), new root.blocks.origin_font_size(26)]; }; root.blocks.LARGE.test = function(alpha) { return /^\\LARGE/.test(alpha); };  root.blocks.huge = {}; root.blocks.huge.build = function(alpha) { return [alpha.substring(5), new root.blocks.origin_font_size(28)]; }; root.blocks.huge.test = function(alpha) { return /^\\huge/.test(alpha); };  root.blocks.Huge = {}; root.blocks.Huge.build = function(alpha) { return [alpha.substring(5), new root.blocks.origin_font_size(30)]; }; root.blocks.Huge.test = function(alpha) { return /^\\Huge/.test(alpha); };})(this.latex);(function(root){ root.blocks.it = function(line_buf){ var self = {}; self.line_buf = line_buf; this.get_block_name = function(){ return 'it'; }; this.get_block_width = function(cursor){ var member = cursor.get_style(); cursor.set_style('italic'); var width = self.line_buf.get_width(cursor); cursor.set_style(member); return width; }; this.get_block_height = function(cursor){ var member = cursor.get_style(); cursor.set_style('italic'); var height = self.line_buf.get_height(cursor); cursor.set_style(member); return height; }; this.block_render = function(cursor){ var member = cursor.get_style(); cursor.set_style('italic'); cursor.set_y(cursor.get_y() - this.get_block_height(cursor) / 2); self.line_buf.render(cursor); cursor.set_style(member); }; }; root.blocks.it.prototype = root.blocks.abstract_block;  root.blocks.it.test = function(alpha) { return /^{\\it/.test(alpha); }; root.blocks.it.build = function(alpha) { const param_length = root.blocks.get_param_length(alpha); return [alpha.substring(param_length + 2), new root.blocks.it((new root.line_buf()).append(alpha.substr(4, param_length - 3)))]; };})(this.latex);(function(root){ 'use strict'; root.blocks.alpha = {}; root.blocks.alpha.build = function(alpha){ return root.blocks.simple.build('α' + alpha.substring(6)); }; root.blocks.alpha.test = function(alpha) { return /^\\alpha/.test(alpha); }; root.blocks.A = {}; root.blocks.A.build = function(alpha){ return root.blocks.simple.build('A' + alpha.substring(2)); }; root.blocks.A.test = function(alpha) { return /^\\A/.test(alpha); };})(this.latex);(function(root){ 'use strict'; root.blocks.beta = {}; root.blocks.beta.build = function(alpha){ return root.blocks.simple.build('β' + alpha.substring(5)); }; root.blocks.beta.test = function(alpha) { return /^\\beta/.test(alpha); }; root.blocks.B = {}; root.blocks.B.build = function(alpha){ return root.blocks.simple.build('B' + alpha.substring(2)); }; root.blocks.B.test = function(alpha) { return /^\\B/.test(alpha); };})(this.latex);(function(root){ 'use strict'; root.blocks.chi = {}; root.blocks.chi.build = function(alpha){ return root.blocks.simple.build('χ' + alpha.substring(4)); }; root.blocks.chi.test = function(alpha) { return /^\\chi/.test(alpha); }; root.blocks.Chi = {}; root.blocks.Chi.build = function(alpha){ return root.blocks.simple.build('Χ' + alpha.substring(4)); }; root.blocks.Chi.test = function(alpha) { return /^\\Chi/.test(alpha); };})(this.latex);(function(root){ 'use strict'; root.blocks.Delta = {}; root.blocks.Delta.build = function(alpha){ return root.blocks.simple.build('Δ' + alpha.substring(6)); }; root.blocks.Delta.test = function(alpha) { return /^\\Delta/.test(alpha); }; root.blocks.delta = {}; root.blocks.delta.build = function(alpha){ return root.blocks.simple.build('δ' + alpha.substring(6)); }; root.blocks.delta.test = function(alpha) { return /^\\delta/.test(alpha); };})(this.latex);(function(root){ 'use strict'; root.blocks.epsilon = {}; root.blocks.epsilon.build = function(alpha){ return root.blocks.simple.build('ε' + alpha.substring(8)); }; root.blocks.epsilon.test = function(alpha) { return /^\\epsilon/.test(alpha); }; root.blocks.Epsilon = {}; root.blocks.Epsilon.build = function(alpha){ return root.blocks.simple.build('E' + alpha.substring(8)); }; root.blocks.Epsilon.test = function(alpha) { return /^\\Epsilon/.test(alpha); };})(this.latex);(function(root){ 'use strict'; root.blocks.eta = {}; root.blocks.eta.build = function(alpha){ return root.blocks.simple.build('η' + alpha.substring(4)); }; root.blocks.eta.test = function(alpha) { return /^\\eta/.test(alpha); }; root.blocks.Eta = {}; root.blocks.Eta.build = function(alpha){ return root.blocks.simple.build('E' + alpha.substring(4)); }; root.blocks.Eta.test = function(alpha) { return /^\\Eta/.test(alpha); };})(this.latex);(function(root){ 'use strict'; root.blocks.gamma = {}; root.blocks.gamma.build = function(alpha){ return root.blocks.simple.build('γ' + alpha.substring(6)); }; root.blocks.gamma.test = function(alpha) { return /^\\gamma/.test(alpha); }; root.blocks.Gamma = {}; root.blocks.Gamma.build = function(alpha){ return root.blocks.simple.build('Γ' + alpha.substring(6)); }; root.blocks.Gamma.test = function(alpha) { return /^\\Gamma/.test(alpha); };})(this.latex);(function(root){ 'use strict'; root.blocks.iota = {}; root.blocks.iota.build = function(alpha){ return root.blocks.simple.build('ι' + alpha.substring(5)); }; root.blocks.iota.test = function(alpha) { return /^\\iota/.test(alpha); }; root.blocks.Iota = {}; root.blocks.Iota.build = function(alpha){ return root.blocks.simple.build('Ι' + alpha.substring(5)); }; root.blocks.Iota.test = function(alpha) { return /^\\Iota/.test(alpha); };})(this.latex);(function(root){ 'use strict'; root.blocks.kappa = {}; root.blocks.kappa.build = function(alpha){ return root.blocks.simple.build('κ' + alpha.substring(6)); }; root.blocks.kappa.test = function(alpha) { return /^\\kappa/.test(alpha); }; root.blocks.Kappa = {}; root.blocks.Kappa.build = function(alpha){ return root.blocks.simple.build('Κ' + alpha.substring(6)); }; root.blocks.Kappa.test = function(alpha) { return /^\\Kappa/.test(alpha); };})(this.latex);(function(root){ 'use strict'; root.blocks.lambda = {}; root.blocks.lambda.build = function(alpha){ return root.blocks.simple.build('λ' + alpha.substring(7)); }; root.blocks.lambda.test = function(alpha) { return /^\\lambda/.test(alpha); }; root.blocks.Lambda = {}; root.blocks.Lambda.build = function(alpha){ return root.blocks.simple.build('∧' + alpha.substring(7)); }; root.blocks.Lambda.test = function(alpha) { return /^\\Lambda/.test(alpha); };})(this.latex);(function(root){ 'use strict'; root.blocks.mu = {}; root.blocks.mu.build = function(alpha){ return root.blocks.simple.build('μ' + alpha.substring(3)); }; root.blocks.mu.test = function(alpha) { return /^\\mu/.test(alpha); }; root.blocks.Mu = {}; root.blocks.Mu.build = function(alpha){ return root.blocks.simple.build('Μ' + alpha.substring(3)); }; root.blocks.Mu.test = function(alpha) { return /^\\Mu/.test(alpha); };})(this.latex);(function(root){ 'use strict'; root.blocks.nu = {}; root.blocks.nu.build = function(alpha){ return root.blocks.simple.build('ν' + alpha.substring(3)); }; root.blocks.nu.test = function(alpha) { return /^\\nu/.test(alpha); }; root.blocks.Nu = {}; root.blocks.Nu.build = function(alpha){ return root.blocks.simple.build('Ν' + alpha.substring(3)); }; root.blocks.Nu.test = function(alpha) { return /^\\Nu/.test(alpha); };})(this.latex);(function(root){ 'use strict'; root.blocks.omega = {}; root.blocks.omega.build = function(alpha){ return root.blocks.simple.build('ω' + alpha.substring(6)); }; root.blocks.omega.test = function(alpha) { return /^\\omega/.test(alpha); }; root.blocks.Omega = {}; root.blocks.Omega.build = function(alpha){ return root.blocks.simple.build('Ω' + alpha.substring(6)); }; root.blocks.Omega.test = function(alpha) { return /^\\Omega/.test(alpha); };})(this.latex);(function(root){ 'use strict'; root.blocks.phi = {}; root.blocks.phi.build = function(alpha){ return root.blocks.simple.build('φ' + alpha.substring(4)); }; root.blocks.phi.test = function(alpha) { return /^\\phi/.test(alpha); }; root.blocks.Phi = {}; root.blocks.Phi.build = function(alpha){ return root.blocks.simple.build('Φ' + alpha.substring(4)); }; root.blocks.Phi.test = function(alpha) { return /^\\Phi/.test(alpha); };})(this.latex);(function(root){ 'use strict'; root.blocks.pi = {}; root.blocks.pi.build = function(alpha){ return root.blocks.simple.build('π' + alpha.substring(3)); }; root.blocks.pi.test = function(alpha) { return /^\\pi/.test(alpha); }; root.blocks.Pi = {}; root.blocks.Pi.build = function(alpha){ return root.blocks.simple.build('∏' + alpha.substring(3)); }; root.blocks.Pi.test = function(alpha) { return /^\\Pi/.test(alpha); };})(this.latex);(function(root){ 'use strict'; root.blocks.psi = {}; root.blocks.psi.build = function(alpha){ return root.blocks.simple.build('ψ' + alpha.substring(4)); }; root.blocks.psi.test = function(alpha) { return /^\\psi/.test(alpha); }; root.blocks.Psi = {}; root.blocks.Psi.build = function(alpha){ return root.blocks.simple.build('Ψ' + alpha.substring(4)); }; root.blocks.Psi.test = function(alpha) { return /^\\Psi/.test(alpha); };})(this.latex);(function(root){ 'use strict'; root.blocks.rho = {}; root.blocks.rho.build = function(alpha){ return root.blocks.simple.build('ρ' + alpha.substring(4)); }; root.blocks.rho.test = function(alpha) { return /^\\rho/.test(alpha); }; root.blocks.Rho = {}; root.blocks.Rho.build = function(alpha){ return root.blocks.simple.build('Ρ' + alpha.substring(4)); }; root.blocks.Rho.test = function(alpha) { return /^\\Rho/.test(alpha); };})(this.latex);(function(root){ 'use strict'; root.blocks.sigma = {}; root.blocks.sigma.build = function(alpha){ return root.blocks.simple.build('σ' + alpha.substring(6)); }; root.blocks.sigma.test = function(alpha) { return /^\\sigma/.test(alpha); }; root.blocks.Sigma = {}; root.blocks.Sigma.build = function(alpha){ return root.blocks.simple.build('∑' + alpha.substring(6)); }; root.blocks.Sigma.test = function(alpha) { return /^\\Sigma/.test(alpha); };})(this.latex);(function(root){ 'use strict'; root.blocks.tau = {}; root.blocks.tau.build = function(alpha){ return root.blocks.simple.build('τ' + alpha.substring(4)); }; root.blocks.tau.test = function(alpha) { return /^\\tau/.test(alpha); }; root.blocks.Tau = {}; root.blocks.Tau.build = function(alpha){ return root.blocks.simple.build('Τ' + alpha.substring(4)); }; root.blocks.Tau.test = function(alpha) { return /^\\Tau/.test(alpha); };})(this.latex);(function(root){ 'use strict'; root.blocks.theta = {}; root.blocks.theta.build = function(alpha){ return root.blocks.simple.build('θ' + alpha.substring(6)); }; root.blocks.theta.test = function(alpha) { return /^\\theta/.test(alpha); }; root.blocks.Theta = {}; root.blocks.Theta.build = function(alpha){ return root.blocks.simple.build('Θ' + alpha.substring(6)); }; root.blocks.Theta.test = function(alpha) { return /^\\Theta/.test(alpha); };})(this.latex);(function(root){ 'use strict'; root.blocks.upsilon = {}; root.blocks.upsilon.build = function(alpha){ return root.blocks.simple.build('υ' + alpha.substring(8)); }; root.blocks.upsilon.test = function(alpha) { return /^\\upsilon/.test(alpha); }; root.blocks.Upsilon = {}; root.blocks.Upsilon.build = function(alpha){ return root.blocks.simple.build('Υ' + alpha.substring(8)); }; root.blocks.Upsilon.test = function(alpha) { return /^\\Upsilon/.test(alpha); };})(this.latex);(function(root){ 'use strict'; root.blocks.xi = {}; root.blocks.xi.build = function(alpha){ return root.blocks.simple.build('ξ' + alpha.substring(3)); }; root.blocks.xi.test = function(alpha) { return /^\\xi/.test(alpha); }; root.blocks.Xi = {}; root.blocks.Xi.build = function(alpha){ return root.blocks.simple.build('Ξ' + alpha.substring(3)); }; root.blocks.Xi.test = function(alpha) { return /^\\Xi/.test(alpha); };})(this.latex);(function(root){ 'use strict'; root.blocks.zeta = {}; root.blocks.zeta.build = function(alpha){ return root.blocks.simple.build('ζ' + alpha.substring(5)); }; root.blocks.zeta.test = function(alpha) { return /^\\zeta/.test(alpha); }; root.blocks.Zeta = {}; root.blocks.Zeta.build = function(alpha){ return root.blocks.simple.build('Z' + alpha.substring(5)); }; root.blocks.Zeta.test = function(alpha) { return /^\\Zeta/.test(alpha); };})(this.latex);(function(root){ 'use strict'; root.blocks.cdots = function(){ var self = {}; self.dots = '···'; this.get_block_name = function(){ return 'cdots'; };  this.get_block_width = function(cursor){ return cursor.get_measure(self.dots).width; }; this.get_block_height = function(cursor){ return cursor.get_measure(self.dots).height; }; this.block_render = function(cursor){ cursor.write_word(self.dots); }; }; root.blocks.cdots.prototype = root.blocks.abstract_block; root.blocks.cdots.build = function(alpha){ const block_length = 6; return [alpha.substring(block_length), new root.blocks.cdots()]; }; root.blocks.cdots.test = function(alpha) { return /^\\cdots/.test(alpha); }; root.blocks.vdots = function(){ var self = {}; self.dots = '·'; this.get_block_name = function(){ return 'vdots'; };  this.get_block_width = function(cursor){ return cursor.get_measure(self.dots).width; }; this.get_block_height = function(cursor){ return cursor.get_measure(self.dots).height * 2; }; this.block_render = function(cursor){ const origin_y = cursor.get_y(); const origin_x = cursor.get_x(); const dots_height = cursor.get_measure(self.dots).height; cursor.write_word(self.dots); cursor.set_x(origin_x).set_y(origin_y - 0.5 * dots_height); cursor.write_word(self.dots); cursor.set_x(origin_x).set_y(origin_y - dots_height); cursor.write_word(self.dots); }; }; root.blocks.vdots.prototype = root.blocks.abstract_block;  root.blocks.vdots.build = function(alpha){ const block_length = 6; return [alpha.substring(block_length), new root.blocks.vdots()]; }; root.blocks.vdots.test = function(alpha) { return /^\\vdots/.test(alpha); };})(this.latex);(function(root){ 'use strict'; root.blocks.frac = function(line_buf_t, line_buf_b){ var self = {}; self.line_bufs = [line_buf_t, line_buf_b]; self.small_ratio = 0.9; self.left_right_spacing = 0.1; self.vertical_spacing = 0.2; this.get_block_name = function(){ return 'frac'; };  this.get_block_width = function(cursor){ var member_size = cursor.get_size(); cursor.set_size(self.small_ratio * member_size); var width = (function(a,b) { if(a > b) { return a; } else { return b; };})(self.line_bufs[0].get_width(cursor), self.line_bufs[1].get_width(cursor)); cursor.set_size(member_size); return width + 2 * self.left_right_spacing * cursor.get_size(); }; this.get_block_height = function(cursor){ var member_size = cursor.get_size(); cursor.set_size(member_size * self.small_ratio);  var top_height = self.line_bufs[0].get_height(cursor); var bottom_height = self.line_bufs[1].get_height(cursor); var harf_height = (function(a, b){if(a > b) { return a; } else { return b;}; })(top_height, bottom_height); cursor.set_size(member_size); return harf_height * 2 + self.vertical_spacing * cursor.get_size() * 5; }; this.block_render = function(cursor){ var member_size = cursor.get_size(); var origin_x = cursor.get_x() + self.left_right_spacing * member_size; var origin_y = cursor.get_y() - self.vertical_spacing * member_size; cursor.set_size(self.small_ratio * member_size); var top_height = self.line_bufs[0].get_height(cursor); var bottom_height = self.line_bufs[1].get_height(cursor); var harf_height = (function(a, b){if(a > b) { return a; } else { return b;}; })(top_height, bottom_height); var top_width = self.line_bufs[0].get_width(cursor); var bottom_width = self.line_bufs[1].get_width(cursor); var width = (function(a, b) { if(a > b) { return a; } else { return b;}; })(top_width, bottom_width); cursor.set_x(origin_x + (width - top_width) / 2); cursor.set_y(origin_y - harf_height * 3.0 / 2 - self.vertical_spacing * member_size * 3); self.line_bufs[0].render(cursor); cursor.set_x(origin_x + (width - bottom_width) / 2); cursor.set_y(origin_y - harf_height / 2 - self.vertical_spacing * member_size); self.line_bufs[1].render(cursor);  cursor.draw_line(origin_x, origin_y - harf_height - self.vertical_spacing * member_size,  origin_x + width,  origin_y - harf_height - self.vertical_spacing * member_size); cursor.set_x(origin_x + width + 2 * self.left_right_spacing * cursor.get_size()); cursor.set_y(origin_y); cursor.set_size(member_size); }; }; root.blocks.frac.prototype = root.blocks.abstract_block; root.blocks.frac.build = function(alpha){ const block_length = 5; const param1_length = root.blocks.get_param_length(alpha.substring(block_length)); const param2_length = root.blocks.get_param_length(alpha.substring(block_length + param1_length + 2)); return [alpha.substring(block_length + param1_length + param2_length + 4), new root.blocks.frac((new root.line_buf()).append(alpha.substr(block_length + 1, param1_length)), (new root.line_buf()).append(alpha.substr(block_length + param1_length + 3, param2_length)))]; }; root.blocks.frac.test = function(alpha) { return /^\\frac/.test(alpha); };})(this.latex);(function(root){ 'use strict'; root.blocks.infty = function(){ var self = {}; self.word = '∞'; this.get_block_name = function(){ return 'infty'; }; this.get_block_width = function(cursor){ return cursor.get_measure(self.word).width; }; this.get_block_height = function(cursor){ return cursor.get_measure(self.word).height; }; this.block_render = function(cursor){ cursor.write_word(self.word); }; }; root.blocks.infty.prototype = root.blocks.abstract_block; root.blocks.infty.build = function(alpha){ const block_length = 6; return [alpha.substring(block_length), new root.blocks.infty()]; }; root.blocks.infty.test = function(alpha) { return /^\\infty/.test(alpha); };})(this.latex);(function(root){ root.blocks.lim = function(bottom_line_buf){ var self = {}; self.operation = 'lim'; self.small_ratio = 0.7; self.big_ratio = 1.4; self.vertical_spacing = 0.01; self.line_buf = bottom_line_buf; this.get_block_name = function(){ return 'lim'; }; function get_operation_height(cursor){ var member = cursor.get_size(); cursor.set_size(member * self.big_ratio); var height = cursor.get_measure(self.operation).height; cursor.set_size(member); return height; }; function get_operation_width(cursor){ var member = cursor.get_size(); cursor.set_size(member * self.big_ratio); var width = cursor.get_measure(self.operation).width; cursor.set_size(member); return width; }; function get_bottom_height(cursor){ var member = cursor.get_size(); cursor.set_size(member * self.small_ratio); var height = self.line_buf.get_height(cursor); cursor.set_size(member); return height; }; function get_bottom_width(cursor){ var member = cursor.get_size(); cursor.set_size(member * self.small_ratio); var width = self.line_buf.get_width(cursor); cursor.set_size(member); return width; }; this.get_block_width = function(cursor){ return (function(a, b) { if(a > b) { return a;} else { return b; }; })(get_bottom_width(cursor), get_operation_width(cursor)); }; this.get_block_height = function(cursor){ return get_bottom_height(cursor) + get_operation_height(cursor) + cursor.get_size() * self.vertical_spacing; }; this.block_render = function(cursor){ var member = cursor.get_size(); var operation = { width : get_operation_width(cursor), height : get_operation_height(cursor) }; var bottom = { width : get_bottom_width(cursor), height : get_bottom_height(cursor) }; var vertical_spacing = cursor.get_size() * self.vertical_spacing; var width = this.get_block_width(cursor); var origin_x = cursor.get_x(); var origin_y = cursor.get_y(); cursor.set_x(origin_x + (width - bottom.width) / 2); cursor.set_y(origin_y - bottom.height * 0.5); cursor.set_size(member * self.small_ratio); self.line_buf.render(cursor); cursor.set_x(origin_x + (width - operation.width) / 2); cursor.set_y(origin_y - bottom.height - vertical_spacing); cursor.set_size(member * self.big_ratio); cursor.write_word(self.operation);  cursor.set_size(member); cursor.set_x(origin_x + width); }; }; root.blocks.lim.prototype = root.blocks.abstract_block; root.blocks.lim.test = function(alpha) { return /^\\lim/.test(alpha); }; root.blocks.lim.build = function(alpha){ const lim_length = 4; var param_length = 0; var param = ''; var is_param = 0; var px = 0; for(var i = lim_length; i < alpha.length; i++){ if(alpha[i] === '_' && is_param === 0) { is_param = 1; px = px + 1; } else if(alpha[i] === '{' && is_param === 1){ param_length = root.blocks.get_param_length(alpha.substring(i)); param = alpha.substr(i + 1, param_length); px = px + 2; break; } else if(is_param === 1){ param_length = 1; param = alpha[i]; break; } else { break; } }; return [alpha.substring(lim_length + param_length + px), new root.blocks.lim((new root.line_buf()).append(param))]; }})(this.latex);(function(root){ 'use strict'; root.blocks.origin_big_operator = function(flag, start_line_buf, limit_line_buf){ var self = {}; self.line_bufs = [start_line_buf, limit_line_buf]; self.operation = flag; self.small_ratio = 0.8; self.big_ratio = 2; self.vertical_spacing = 0; self.left_spacing = 0.1; this.get_block_name = function(){ return 'sum'; };  function get_start_height(cursor){ var member = cursor.get_size(); cursor.set_size(member * self.small_ratio); var height = self.line_bufs[0].get_height(cursor); cursor.set_size(member); return height; }; function get_limit_height(cursor){ var member = cursor.get_size(); cursor.set_size(member * self.small_ratio); var height = self.line_bufs[1].get_height(cursor); cursor.set_size(member); return height; }; function get_operation_height(cursor){ var member = cursor.get_size(); cursor.set_size(member * self.big_ratio); var height = cursor.get_measure(self.operation).height; cursor.set_size(member); return height; }; function get_start_width(cursor){ var member = cursor.get_size(); cursor.set_size(member * self.small_ratio); var width = self.line_bufs[0].get_width(cursor); cursor.set_size(member); return width; }; function get_limit_width(cursor){ var member = cursor.get_size(); cursor.set_size(member * self.small_ratio); var width = self.line_bufs[1].get_width(cursor); cursor.set_size(member); return width; }; function get_operation_width(cursor){ var member = cursor.get_size(); cursor.set_size(member * self.big_ratio); var width = cursor.get_measure(self.operation).width + self.left_spacing * member; cursor.set_size(member); return width; }; this.get_block_width = function(cursor){ var max_func = function(a, b) { if (a > b) { return a; } else { return b;}; }; return max_func(max_func(get_start_width(cursor), get_limit_width(cursor)), get_operation_width(cursor)); }; this.get_block_height = function(cursor){ return get_start_height(cursor) + get_limit_height(cursor) + get_operation_height(cursor) * (1.1 + 2 * self.vertical_spacing); }; this.block_render = function(cursor){ var member = cursor.get_size(); var origin_x = cursor.get_x(); var origin_y = cursor.get_y(); var width = this.get_block_width(cursor); var height = this.get_block_height(cursor); var limit_height = get_limit_height(cursor); var limit_width = get_limit_width(cursor); var start_height = get_start_height(cursor); var start_width = get_start_width(cursor); var operation_width = get_operation_width(cursor); var operation_height = get_operation_height(cursor); cursor.set_x(origin_x + (width - operation_width) / 2); cursor.set_y(origin_y - start_height - operation_height * self.vertical_spacing - operation_height * 0.05); cursor.set_size(member * self.big_ratio); cursor.write_word(self.operation); cursor.set_x(origin_x + (width - start_width) / 2); cursor.set_y(origin_y - operation_height * self.vertical_spacing - operation_height * 0.2); cursor.set_size(member * self.small_ratio); self.line_bufs[0].render(cursor); cursor.set_x(origin_x + (width - limit_width) / 2); cursor.set_y(origin_y - start_height - operation_height * (1.1 + 2 * self.vertical_spacing)); self.line_bufs[1].render(cursor); cursor.set_size(member); cursor.set_x(origin_x + width + operation_width * self.left_spacing); }; }; function origin_build(flag, length, alpha){ const block_length = length; var start_length = 0; var start_param = ''; var is_start = 0; var is_limit = 0; var limit_length = 0; var limit_param = ''; var px = 0;  for(var i = block_length; i < alpha.length; i++){ if(alpha[i] === '_' && is_start === 0) { is_start = 1; px = px + 1; } else if(alpha[i] === '^' && is_limit === 0) { is_limit = 1; px = px + 1; } else if(alpha[i] === '{' && is_start === 1) { start_length = root.blocks.get_param_length(alpha.substring(i)); start_param = alpha.substr(i + 1, start_length); is_start = 2; i = i + 1 + start_length; px = px + 2; } else if(alpha[i] === '{' && is_limit === 1) { limit_length = root.blocks.get_param_length(alpha.substring(i)); limit_param = alpha.substr(i + 1, limit_length); is_limit = 2; i = i + 1 + limit_length; px = px + 2; } else if(is_start === 1){ start_length = 1; start_param = alpha[i]; is_start = 2; } else if(is_limit === 1){ limit_length = 1; limit_param = alpha[i]; is_limit = 2; } else { break; }; }; return [alpha.substring(block_length + start_length + limit_length + px), new root.blocks.origin_big_operator(flag, (new root.line_buf()).append(start_param), (new root.line_buf()).append(limit_param))]; } root.blocks.origin_big_operator.prototype = root.blocks.abstract_block; root.blocks.sum = {}; root.blocks.sum.test = function(alpha) { return /^\\sum/.test(alpha); }; root.blocks.sum.build = function(alpha) { return origin_build('Σ', 4, alpha); }; root.blocks.prod = {}; root.blocks.prod.test = function(alpha) { return /^\\prod/.test(alpha); }; root.blocks.prod.build = function(alpha) { return origin_build('Π', 5, alpha); }; root.blocks.bigcup = {}; root.blocks.bigcup.test = function(alpha) { return /^\\bigcup/.test(alpha); }; root.blocks.bigcup.build = function(alpha) { return origin_build('∪', 7, alpha); }; root.blocks.bigcap = {}; root.blocks.bigcap.test = function(alpha) { return /^\\bigcap/.test(alpha); }; root.blocks.bigcap.build = function(alpha) { return origin_build('∩', 7, alpha); }; root.blocks.bigvee = {}; root.blocks.bigvee.test = function(alpha) { return /^\\bigvee/.test(alpha); }; root.blocks.bigvee.build = function(alpha) { return origin_build('∨', 7, alpha); }; root.blocks.bigwedge = {}; root.blocks.bigwedge.test = function(alpha) { return /^\\bigwedge/.test(alpha); }; root.blocks.bigwedge.build = function(alpha) { return origin_build('∧', 9, alpha); }; root.blocks.bigoplus = {}; root.blocks.bigoplus.test = function(alpha) { return /^\\bigoplus/.test(alpha); }; root.blocks.bigoplus.build = function(alpha) { return origin_build('⊕', 9, alpha); }; root.blocks.bigotimes = {}; root.blocks.bigotimes.test = function(alpha) { return /^\\bigotimes/.test(alpha); }; root.blocks.bigotimes.build = function(alpha) { return origin_build('⊙', 10, alpha); };})(this.latex);(function(root){ 'use strict'; root.blocks.triangleleft = {}; root.blocks.triangleleft.test = function(alpha) { return /^\\triangleleft/.test(alpha); }; root.blocks.triangleleft.build = function(alpha) { return [alpha.substring(13), new root.blocks.simple('◁')]; }; root.blocks.cdot = {}; root.blocks.cdot.test = function(alpha) { return /^\\cdot/.test(alpha); }; root.blocks.cdot.build = function(alpha) { return [alpha.substring(5), new root.blocks.simple('·')]; }; root.blocks.pm = {}; root.blocks.pm.test = function(alpha) { return /^\\pm/.test(alpha); }; root.blocks.pm.build = function(alpha) { return [alpha.substring(3), new root.blocks.simple('±')]; }; root.blocks.triangleright = {}; root.blocks.triangleright.test= function(alpha) { return /^\\triangleright/.test(alpha); }; root.blocks.triangleright.build = function(alpha) { return [alpha.substring(14), new root.blocks.simple('▷')]; }; root.blocks.div = {}; root.blocks.div.test = function(alpha) { return /^\\div/.test(alpha); }; root.blocks.div.build = function(alpha) { return [alpha.substring(4), new root.blocks.simple('÷')]; }; root.blocks.times = {}; root.blocks.times.test = function(alpha) { return /^\\times/.test(alpha); }; root.blocks.times.build = function(alpha) { return [alpha.substring(6), new root.blocks.simple('×')]; }; root.blocks.cup = {}; root.blocks.cup.test = function(alpha) { return /^\\cup/.test(alpha); }; root.blocks.cup.build = function(alpha) { return [alpha.substring(4), new root.blocks.simple('∪')]; }; root.blocks.cap = {}; root.blocks.cap.test = function(alpha) { return /^\\cap/.test(alpha); }; root.blocks.cap.build = function(alpha) { return [alpha.substring(4), new root.blocks.simple('∩')]; }; root.blocks.vee = {}; root.blocks.vee.test = function(alpha) { return /^\\vee/.test(alpha); }; root.blocks.vee.build = function(alpha) { return [alpha.substring(4), new root.blocks.simple('∨')]; }; root.blocks.wedge = {}; root.blocks.wedge.test = function(alpha) { return /^\\wedge/.test(alpha); }; root.blocks.wedge.build = function(alpha) { return [alpha.substring(6), new root.blocks.simple('∧')]; }; root.blocks.oplus = {}; root.blocks.oplus.test = function(alpha) { return /^\\oplus/.test(alpha); }; root.blocks.oplus.build = function(alpha) { return [alpha.substring(6), new root.blocks.simple('⊕')]; };})(this.latex);(function(root){ 'use strict'; root.blocks.sqrt = function(n, inner_line_buf){ var self = {}; self.n = n; self.line_buf = inner_line_buf; self.inner_vertical_spacing = 0.1; this.get_block_width = function(cursor){ return cursor.get_size() + self.line_buf.get_width(cursor); }; this.get_block_height = function(cursor){ return cursor.get_size() * self.inner_vertical_spacing + self.line_buf.get_height(cursor); }; this.block_render = function(cursor){ var origin_x = cursor.get_x(); var origin_y = cursor.get_y(); var inner_length = self.line_buf.get_width(cursor); var block_height = this.get_block_height(cursor); var one_word_size = cursor.get_size(cursor); cursor.draw_line(origin_x, origin_y - block_height * 0.6, origin_x + one_word_size * 0.1, origin_y - block_height * 0.5); cursor.draw_line(origin_x + one_word_size * 0.1, origin_y - block_height * 0.5, origin_x + one_word_size * 0.5, origin_y); cursor.draw_line(origin_x + one_word_size * 0.5, origin_y, origin_x + one_word_size, origin_y - block_height); }; };})(this.latex);(function(root){ 'use strict'; root.blocks.to = function(){ var self = {}; self.word = '→'; this.get_block_name = function(){ return 'to'; };  this.get_block_width = function(cursor){ return cursor.get_measure(self.word).width; }; this.get_block_height = function(cursor){ return cursor.get_measure(self.word).height; }; this.block_render = function(cursor){ cursor.write_word(self.word); }; }; root.blocks.to.prototype = root.blocks.abstract_block; root.blocks.to.build = function(alpha){ const block_length = 3; return [alpha.substring(block_length), new root.blocks.to()]; }; root.blocks.to.test = function(alpha) { return /^\\to/.test(alpha); };})(this.latex);
